class Solution {
    //递归
    // public List<Integer> inorderTraversal(TreeNode root) {
    //     List<Integer> res = new ArrayList<Integer>();
    //     dfs(res,root);
    //     return res;
    // }
    // void dfs(List<Integer> res, TreeNode root) {
    //     if(root == null) {
    //         return;
    //     }
    //     dfs(res,root.left);
    //     res.add(root.val);
    //     dfs(res,root.right);
    // }

    // 迭代
        // public List<Integer> inorderTraversal(TreeNode root) {
        //     List<Integer> res = new ArrayList<Integer>();
        //     Stack<TreeNode> stack = new Stack<TreeNode>();
        //     while(stack.size()>0 || root!=null) {
        //         if(root !=null) {
        //             stack.add(root);
        //             root = root.left;
        //         } else {
        //             TreeNode tmp = stack.pop();
        //             res.add(tmp.val);
        //             root = tmp.right;
        //         }
        //     }
        //     return res;
        // }
            public List<Integer> inorderTraversal(TreeNode root) {
                List<Integer> res = new ArrayList<Integer>();
                TreeNode pre = null;
              while (root != null) {
                  if(root.left != null) {
                      pre = root.left;
                      while(pre.right != null) {
                          pre = pre.right;
                      }
                      pre.right = root;
                      TreeNode tmp = root;
                      root = root.left;
                      tmp.left = null;
                  } else {
                      res.add(root.val);
                      root = root.right;
                  }
              }  
              return res;
            }
}
