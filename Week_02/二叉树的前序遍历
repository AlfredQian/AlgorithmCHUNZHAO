class Solution {
    // public List<Integer> preorderTraversal(TreeNode root) {
    //     List<Integer> res = new ArrayList<Integer>();
    //     preorder(res,root);
    //     return res;
    // }
    // void preorder(List<Integer> res,TreeNode root) {
    //     if (root != null) {
    //         res.add(root.val);
    //         preorder(res,root.left);
    //         preorder(res,root.right);
    //     } else {
    //         return;
    //     }
    // }
        public List<Integer> preorderTraversal(TreeNode root) {
            List<Integer> res = new ArrayList<Integer>();
            if(root == null) {
                return res;
            }

            Deque<TreeNode> stack = new LinkedList<TreeNode>();
            TreeNode node = root;
            while(!stack.isEmpty() || node!= null) {
                while(node != null) {
                    res.add(node.val);
                    stack.push(node);
                    node = node.left;
                }
                node = stack.pop();
                node = node.right;
            }
            return res;
        }
}
